;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Section: Imports
;;

(ns riemann.config
  (:import  [java.util HashMap])
  (:require riemann.core
            riemann.transport
            [clojure.java.io   :as io]
            [cheshire.core     :as cheshire]
            [langohr.core      :as l-core]
            [langohr.channel   :as l-channel]
            [langohr.queue     :as l-queue]
            [langohr.consumers :as l-consumers])
  (:use     [riemann.service   :only [Service ServiceEquiv]]))

;;
;; End Section: Imports
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Section: RabbitMQ services
;;

; reset below
(def rabbitmq-connection-service)

(defn queue-message-handler [core]
  (fn [ch {:keys [content-type delivery-tag type] :as meta} ^bytes payload]
    (let [event (cheshire/parse-string (String. payload) true)]
      (riemann.core/stream! core event))))

(defrecord RabbitMQConnection [connection]
  ServiceEquiv
  (equiv? [this other]
    (instance? RabbitMQConnection other))

  Service
  (conflict? [this other]
    false)

  (reload! [this new-core]
    true)

  (start! [this]
    (locking this
      (when (not @connection)
        (let [new-connection (l-core/connect)]
          (info "RabbitMQ connection opened")
          (reset! connection new-connection)))))

  (stop! [this]
    (locking this
      (when @connection
        (info "RabbitMQ connection closing")
        (l-core/close @connection)
        (reset! connection nil)))))

(defn rabbitmq-connection []
  ; connection is opened here because we need to make sure
  ; it is started before the manager queue service is started
  (let [new-connection (l-core/connect)]
    (info "RabbitMQ connection opened")
    (service! (RabbitMQConnection. (atom new-connection)))))

(defrecord RabbitMQChannel [queue-name
                            core
                            channel]
  ServiceEquiv
  (equiv? [this other]
    (and
      (instance? RabbitMQChannel other)
      (= queue-name (:queue-name other))))

  Service
  (conflict? [this other]
    (and
      (instance? RabbitMQChannel other)
      (= queue-name (:queue-name other))))

  (reload! [this new-core]
    (reset! core new-core))

  (start! [this]
    (locking this
      (when (not @channel)
        (let [connection  (:connection rabbitmq-connection-service)
              new-channel (l-channel/open @connection)]
          (l-queue/declare new-channel
                           queue-name
                           :exclusive false
                           :durable false
                           :auto-delete true)
          (l-consumers/subscribe new-channel
                                 queue-name
                                 (queue-message-handler @core)
                                 :auto-ack true)
          (info "RabbitMQ" queue-name "consumer started")
          (reset! channel new-channel)))))

  (stop! [this]
    (locking this
      (when @channel
        (info "RabbitMQ" queue-name "consumer stopping")
        (l-core/close @channel)
        (reset! channel nil)))))

(defn rabbitmq-queue [queue-name]
  (service! (RabbitMQChannel. queue-name
                              (atom nil)
                              (atom nil))))

;;
;; End Section: RabbitMQ services
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Section: Global riemann configuration
;;

(logging/init {:file "riemann.log"})

;;
;; End Section: Global riemann configuration
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Section: User definitions
;; Mostly helper predicates, streams, etc... used
;; when writing policies
;;

; example: (where* (is-node-name "some_name") ...)
(defn is-node-name [node-name]
  (fn [event]
    (= node-name (:node_name event))))

;;
;; End Section: User definitions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Section: Deployments core administration
;;

(def config-lock                 (Object.))
(def cores-map                   (HashMap.))
(def rabbitmq-connection-service (rabbitmq-connection))

(defn start-config! [& children]
  (fn [event]
    (locking config-lock
      (let [config-path   (:config_path event)
            deployment-id (:deployment_id event)]

        ; prepare config cores
        (reset! core      (riemann.core/core))
        (reset! next-core (riemann.core/core))

        ; load configuration files and apply to create new core
        (include config-path)
        (apply!)

        (.put cores-map deployment-id @core)))))

(defn stop-config! [& children]
  (fn [event]
    (locking config-lock
      (let [deployment-id (:deployment_id event)
            ; get core instance to stop and remove it from the map
            stopped-core  (.remove cores-map deployment-id)]

        (when stopped-core
          (riemann.core/stop! stopped-core))))))

;;
;; End Section: Deployments core administration
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Section: Management core configuration
;;

(rabbitmq-queue "manager-riemann")

(periodically-expire 5)

(let [index (index)]
  (streams
    (default :ttl 60 index)
    (where (and (service "cloudify.configuration")
                (state "start"))
      (start-config!))
    (where (and (service "cloudify.configuration")
                (state "stop"))
      (stop-config!))))

;;
;; End Section: Management core configuration
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
