definitions:

    ##################################################################################
    # Auto imported:
    ##################################################################################
    imports:
        - 'celery_worker_installer'
        - 'celery_plugin_installer'
        - 'cloudify.rules'

    ##################################################################################
    # Base type definitions
    ##################################################################################
    types:

        # A host (physical / virtual or LXC) in a topology
        cloudify.tosca.types.host:
            interfaces:
                - "cloudify.tosca.interfaces.host.provisioner"
                - "cloudify.tosca.interfaces.worker.installer"
                - "cloudify.tosca.interfaces.worker.plugin_installer"
            properties:
                install_agent: 'false'

        # A middleware component in a topology
        cloudify.tosca.types.middleware_server:
            interfaces:
                - "cloudify.tosca.interfaces.middleware_component.installer"

        cloudify.tosca.types.db_server:
            derived_from: "cloudify.tosca.types.middleware_server"

        cloudify.tosca.types.web_server:
            derived_from: "cloudify.tosca.types.middleware_server"

        # An application artifact to deploy
        cloudify.tosca.types.app_module:
            interfaces:
                - "cloudify.tosca.interfaces.app_module.installer"


    ##################################################################################
    # Base relationship definitions
    ##################################################################################
    relationships:

        cloudify.tosca.relationships.depends_on: { }

        cloudify.tosca.relationships.hosted_on:
            derived_from: "cloudify.tosca.relationships.depends_on"

        cloudify.tosca.relationships.deployed_on:
            derived_from: "cloudify.tosca.relationships.depends_on"


    ##################################################################################
    # Base interface definitions
    ##################################################################################
    interfaces:

        # provision and manage host lifecycle
        cloudify.tosca.interfaces.host.provisioner:
            operations:
                - "provision"
                - "terminate"
                - "start"
                - "pause"
                - "restart"

        # installs middleware components
        cloudify.tosca.interfaces.middleware_component.installer:
            operations:
                - "install"
                - "uninstall"
                - "start"
                - "stop"
                - "restart"

        cloudify.tosca.interfaces.app_module.installer:
            operations:
                - "deploy"
                - "undeploy"
                - "stop"
                - "start"

        # start and manage celery worker lifecycle
        cloudify.tosca.interfaces.worker.installer:
            operations:
                - "install"
                - "restart"

        # installs plugins on the agent host
        cloudify.tosca.interfaces.worker.plugin_installer:
            operations:
                - "install"

    ##################################################################################
    # Base plan definitions
    ##################################################################################
    plans:

        cloudify.tosca.types.host:
            init:
                radial: |
                    define host_init
                      execute_operation operation: 'provision'
                      execute_operation operation: 'start'
                      given
                        that '${node.properties.install_agent} == true'
                          reload_riemann_config policies: '${node.policies}'
                          state resource_id: '${node.id}', state: { reachable: "true" }
                          execute_operation operation: 'cloudify.tosca.interfaces.worker.installer.install'
                          iterator on: '$node.plugins_to_install', to_v: 'plugin'
                            log message: 'installing plugin: ${v:plugin.name}'
                            execute_operation operation: 'cloudify.tosca.interfaces.worker.plugin_installer.install', params: {
                              plugin: {
                                name: '${v:plugin.name}',
                                url: '${v:plugin.url}'
                              }
                            }
                          execute_operation operation: 'cloudify.tosca.interfaces.worker.installer.restart'

        cloudify.tosca.types.middleware_server:
            init:
                radial: |
                    define middleware_server_init
                        execute_operation operation: 'install'
                        execute_operation operation: 'start'

        cloudify.tosca.types.app_module:
            init:
                radial: |
                    define app_module_init
                        execute_operation operation: 'deploy'
                        execute_operation operation: 'start'


    ##################################################################################
    # Base artifact definitions
    ##################################################################################
    artifacts:

        # Basic plugin artifact
        cloudify.tosca.artifacts.plugin: { }

        # Remote plugin artifact
        cloudify.tosca.artifacts.remote_plugin:
            derived_from: "cloudify.tosca.artifacts.plugin"

        # Worker plugin artifact - runs on Cloudify agent
        cloudify.tosca.artifacts.agent_plugin:
            derived_from: "cloudify.tosca.artifacts.plugin"


    ##################################################################################
    # Policies
    ##################################################################################
    policies:
        types:
            start_detection_policy: { }
            failure_detection_policy: { }