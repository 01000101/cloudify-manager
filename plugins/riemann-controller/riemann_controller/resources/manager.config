; vim: filetype=clojure

(ns riemann.config
  (:import [java.util HashMap])
  (:require riemann.core))

(def config-lock (Object.))
(def current-port (atom 5556))
(def cores-map (HashMap.))

(defn start-config! [& children]
  (fn [event]
    (locking config-lock
      (let [config-path (:description event)
            config-dir-file (file config-path)
            managed-config (str "(tcp-server {:host \"0.0.0.0\" :port " @current-port "})\n")
            port-path (str config-path "/port")
            managed-config-path (str config-path "/managed.config")]
        (reset! core (riemann.core/core))
        (reset! next-core (riemann.core/core))
        (spit managed-config-path managed-config)
        (spit port-path (str @current-port))
        (include config-path)
        (apply!)
        (swap! current-port inc)
        (.put cores-map config-path @core)))))

(defn stop-config! [& children]
  (fn [event]
    (locking config-lock
      (let [config-path (:description event)
            stopped-core (.remove cores-map config-path)]
        (riemann.core/stop! stopped-core)))))

(logging/init {:file "riemann.log"})

(tcp-server {:host "0.0.0.0" :port 5555})

(periodically-expire 5)

(let [index (index)]
  (streams
    (default :ttl 60 index)
    (where (and (service "cloudify.configuration")
                (state "start"))
      (start-config!))
    (where (and (service "cloudify.configuration")
                (state "stop"))
      (stop-config!))))
