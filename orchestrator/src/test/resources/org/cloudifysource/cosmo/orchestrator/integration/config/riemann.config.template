; -*- mode: clojure; -*-
; vim: filetype=clojure

(def logLocation (str (System/getProperty "user.home") "/.riemann/log/riemann.log"))
(logging/init :file logLocation)

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "0.0.0.0"]
  (tcp-server :host host)
  (udp-server :host host)
  (ws-server  :host host))

; Expire old events from the index every 5 seconds.
(periodically-expire 5)


(defn prefix_predicate [prefix]
  (fn [string]
    (.startsWith string prefix)))


(defn extract_name_tag [event]
    (first
        (filter 
            (prefix_predicate "name=") 
            (get event :tags))))


(defn get_node_id [event]
  (def nameTag (extract_name_tag event))
  (if (nil? nameTag) 
    nil
    (get (clojure.string/split nameTag #"=") 1)))


(defn tagged_with_name [event, node_id]
  (def nameTag (get_node_id event))
  (= nameTag node_id))


(defn create_reacahble_with_ip [& children]
  (fn [e]
    (def node_id (get_node_id e))
    (let [ip-event (assoc e :host node_id :service "ip" :state (get e :host) :tags ["cosmo"])]
            (call-rescue ip-event children)
    )
    (let [reachable-event (assoc e :host node_id :service "reachable" :state "true" :tags ["cosmo"])]
            (call-rescue reachable-event children)
    )
  )
)

; Keep events in the index for 5 minutes by default.
(let [index (default :ttl 300 (update-index (index)))]

  (streams

    ; Index all events immediately.
    index

    ; Calculate an overall rate of events.
    (with {:metric 1 :host nil :state "ok" :service "events/sec"} (rate 5 index))

    ; Log expired events.
    (expired
      (fn [event] (info "expired" event)))

    $events_mapping

  )

)

(streams prn)
