##################################################################################
# Base type definitions
##################################################################################
node_types:
    # base type for provided cloudify types
    cloudify.types.base:
        interfaces:
            cloudify.interfaces.lifecycle:
                - create
                - configure
                - start
                - stop
                - delete
            cloudify.interfaces.monitor_lifecycle:
                - start
                - stop

    # A tier in a topology
    cloudify.types.tier: 
        derived_from: cloudify.types.base

    # A host (physical / virtual or LXC) in a topology
    cloudify.types.host:
        derived_from: cloudify.types.base
        interfaces:
            cloudify.interfaces.worker_installer:
                - install: agent_installer.worker_installer.tasks.install
                - start: agent_installer.worker_installer.tasks.start
                - stop: agent_installer.worker_installer.tasks.stop
                - uninstall: agent_installer.worker_installer.tasks.uninstall
                - restart: agent_installer.worker_installer.tasks.restart
            cloudify.interfaces.plugin_installer:
                - install: plugin_installer.plugin_installer.tasks.install
            cloudify.interfaces.host:
                - get_state
        properties:
            install_agent:
                default: true
            cloudify_agent:
                default: {}
            ip:
                default: ''

    # A Linux container with or without docker
    cloudify.types.container:
        derived_from: cloudify.types.host

    # A storage volume in a topology
    cloudify.types.volume:
        derived_from: cloudify.types.base

    # A storage Container (Object Store segment)
    cloudify.types.object_container:
        derived_from: cloudify.types.base

    # An isolated virtual layer 2 domain or a logical / virtual switch
    cloudify.types.network:
        derived_from: cloudify.types.base

    # An isolated virtual layer 3 subnet with IP range
    cloudify.types.subnet:
        derived_from: cloudify.types.base

    # A network router
    cloudify.types.router:
        derived_from: cloudify.types.base

    # A virtual Load Balancer
    cloudify.types.load_balancer:
        derived_from: cloudify.types.base

    # A virtual floating IP
    cloudify.types.virtual_ip:
        derived_from: cloudify.types.base

    # A security group
    cloudify.types.security_group:
        derived_from: cloudify.types.base

    # A middleware component in a topology
    cloudify.types.middleware_server:
        derived_from: cloudify.types.base

    cloudify.types.db_server:
        derived_from: "cloudify.types.middleware_server"

    cloudify.types.web_server:
        derived_from: "cloudify.types.middleware_server"
        properties:
            port:
                default: 80

    cloudify.types.app_server:
        derived_from: "cloudify.types.middleware_server"

    cloudify.types.message_bus_server:
        derived_from: "cloudify.types.middleware_server"

    # An application artifact to deploy
    cloudify.types.app_module:
        derived_from: cloudify.types.base


##################################################################################
# Base relationship definitions
##################################################################################
relationships:

    cloudify.relationships.depends_on:
        source_interfaces:
            cloudify.interfaces.relationship_lifecycle:
                - preconfigure
                - postconfigure
                - establish
                - unlink
        target_interfaces:
            cloudify.interfaces.relationship_lifecycle:
                - preconfigure
                - postconfigure
                - establish
                - unlink
        properties:
            connection_type:
                default: all_to_all

    cloudify.relationships.connected_to:
        derived_from: "cloudify.relationships.depends_on"

    cloudify.relationships.contained_in:
        derived_from: "cloudify.relationships.depends_on"


##################################################################################
# Workflows
##################################################################################
workflows:
    install: default_workflows.workflows.default.install
    uninstall: default_workflows.workflows.default.uninstall

##################################################################################
# Base artifact definitions
##################################################################################
plugins:

    # Basic plugin artifact
    cloudify.plugins.plugin: { }

    # Remote plugin artifact
    cloudify.plugins.remote_plugin:
        derived_from: cloudify.plugins.plugin

    # Worker plugin artifact - runs on Cloudify agent
    cloudify.plugins.agent_plugin:
        derived_from: cloudify.plugins.plugin

    # Worker plugin artifact - runs on a dedicated worker for the deployment
    cloudify.plugins.manager_plugin:
        derived_from: cloudify.plugins.plugin

    agent_installer:
        derived_from: cloudify.plugins.manager_plugin

    plugin_installer:
        derived_from: cloudify.plugins.agent_plugin

    windows_agent_installer:
        derived_from: cloudify.plugins.manager_plugin

    windows_plugin_installer:
        derived_from: cloudify.plugins.agent_plugin

    default_workflows:
        derived_from: cloudify.plugins.manager_plugin


##################################################################################
# Policy types definitions
##################################################################################
policy_types:

    threshold:
        properties:
            metric:
                description: The metric name
            threshold:
                description: The metric threshold value
            upper_bound:
                description: |
                    boolean value for describing the semantics of the threshold.
                    if 'true': metrics whose value if bigger then the threshold
                    will cause the triggers to be processed. if 'false': metrics
                    with values lower then the threshold will do so.
                default: true
        source: https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/CFY-1210-policy-resources/resources/rest-service/cloudify/policies/threshold.clj

##################################################################################
# Policy triggers definitions
##################################################################################
policy_triggers:

    execute_workflow:
        parameters:
            workflow:
                description: Workflow name to execute
            workflow_parameters:
                description: Workflow paramters
                default: {}
            force:
                description: |
                    Should the workflow be executed even when another execution
                    for the same workflow is currently in progress
                default: false
            allow_custom_parameters:
                description: |
                    Should parameters not defined in the workflow parameters
                    schema be accepted
                default: false
            socket_timeout:
                description: Socket timeout when making request to manager REST in ms
                default: 1000
            conn_timeout:
                description: Connection timeout when making request to manager REST in ms
                default: 1000
        source: https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/CFY-1210-policy-resources/resources/rest-service/cloudify/triggers/execute_workflow.clj
