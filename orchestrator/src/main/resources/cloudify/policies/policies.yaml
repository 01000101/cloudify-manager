
##################################################################################
# Policies & rules definitions
##################################################################################
policies:
    types:
        start_detection_policy:
            message: "start detection passed"
            ref: "cloudify.policies.start_detection"

        failure_detection_policy:
            message: "detected failure"
            ref: "cloudify.policies.failure_detection"

        performance_policy:
            message: "performance monitoring"
            ref: "cloudify.policies.performance"

    rules:
        #node_policy_events will be injected with the matching policy (see above)
        #node_id will be injected with the current node id
        #placeholders with '#' will be replaced by the real time data of the field when the policy event was sent.
        state_equals:

            message: "${service} state has changed to #{state.value}"
            rule: |
              (changed-state
                (where
                    (and
                        (service "${service}")
                        (state "${state}")
                        (tagged "name=$node_id"))
                    $node_policy_events)
              )

        state_not_equals:

            message: "${service} has changed to #{state.value}"
            rule: |
              (changed-state
                (where
                    (and
                        (service "${service}")
                        (not (state "${state}"))
                        (tagged "name=$node_id"))
                    $node_policy_events)
              )

        metric_below:

            message: "metric ${service} has dropped below a threshold of ${metric}, with a value of #{metric.value}"
            rule: |
              (by [:host :service]
                (changed
                    (fn [e]
                        (and
                            (not (nil? (:metric e)))
                            (< (:metric e) ${metric})
                        )
                    )
                    {:init false}
                    (where
                        (and
                            (service "${service}")
                            (and
                                (not (nil? metric))
                                (< metric ${metric})
                            )
                            (tagged "name=$node_id")
                        )
                        $node_policy_events
                    )
                )
              )
