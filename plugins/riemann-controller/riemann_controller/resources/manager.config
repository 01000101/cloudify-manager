;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Section: Imports
;;

(ns riemann.config
  (:import  [java.util.concurrent ConcurrentHashMap])
  (:require riemann.core
            riemann.transport
            [clojure.java.io   :as io]
            [cheshire.core     :as cheshire]
            [clj-http.client   :as http]
            [langohr.core      :as l-core]
            [langohr.channel   :as l-channel]
            [langohr.queue     :as l-queue]
            [langohr.consumers :as l-consumers])
  (:use     [riemann.service   :only [Service ServiceEquiv]]))

;;
;; End Section: Imports
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Section: Forward reference
;;

(def amqp-connection-service)
(def triggers-map)
(def groups-map)

;;
;; End Section: Forward reference
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Section: RabbitMQ services
;;
;; TODO: all the thread semantics are not clear to me yet, need to investigate.
;; From what I understand, the connection has its own thread(pool?) and it passes
;; events to the channel, which then processes them in its own thread(pool?)
;; which calls the subsribed consumers using that thread(pool?)
;; [another possibliy is that each consumer has its own thread(pool?) ?? not sure]
;; anyway, it is on the final thread(pool?) (either the channel or the consumer one if such exists)
;; that the queue message handler is invoked which in turn, means it is on that thread(pool?) the riemann
;; events will be processed and passed to the core streams. Thus, event processing should probably never block
;; and delegate blocking operations to some other thread pool for blocking operations.

(defn queue-message-handler [core]
  (fn [ch {:keys [content-type delivery-tag type] :as meta} ^bytes payload]
    (let [event (cheshire/parse-string (String. payload) true)]
      (riemann.core/stream! core event))))

(defrecord AMQPConnection [connection]
  ServiceEquiv
  (equiv? [this other]
    (instance? AMQPConnection other))

  Service
  (conflict? [this other]
    false)

  (reload! [this new-core]
    true)

  (start! [this]
    (locking this
      (when (not @connection)
        (let [new-connection (l-core/connect)]
          (info "AMQP connection opened")
          (reset! connection new-connection)))))

  (stop! [this]
    (locking this
      (when @connection
        (info "AMQP connection closing")
        (l-core/close @connection)
        (reset! connection nil)))))

(defn amqp-connection []
  ; connection is opened here because we need to make sure
  ; it is started before the manager queue service is started
  (let [new-connection (l-core/connect)]
    (info "AMQP connection opened")
    (service! (AMQPConnection. (atom new-connection)))))

(defrecord AMQPQueueConsumer [queue-name
                              core
                              channel]
  ServiceEquiv
  (equiv? [this other]
    (and
      (instance? AMQPQueueConsumer other)
      (= queue-name (:queue-name other))))

  Service
  (conflict? [this other]
    (and
      (instance? AMQPQueueConsumer other)
      (= queue-name (:queue-name other))))

  (reload! [this new-core]
    (reset! core new-core))

  (start! [this]
    (locking this
      (when (not @channel)
        (let [connection  (:connection amqp-connection-service)
              new-channel (l-channel/open @connection)]
          (l-queue/declare new-channel
                           queue-name
                           :exclusive false
                           :durable false
                           :auto-delete true)
          (l-consumers/subscribe new-channel
                                 queue-name
                                 (queue-message-handler @core)
                                 :auto-ack true)
          (info "AMQP" queue-name "consumer started")
          (reset! channel new-channel)))))

  (stop! [this]
    (locking this
      (when @channel
        (info "AMQP" queue-name "consumer stopping")
        (l-core/close @channel)
        (reset! channel nil)))))

(defn amqp-queue-consumer [queue-name]
  (service! (AMQPQueueConsumer. queue-name
                                (atom nil)
                                (atom nil))))

;;
;; End Section: RabbitMQ services
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Section: Global riemann configuration
;;

(logging/init {:file "/tmp/riemann.log"})

;;
;; End Section: Global riemann configuration
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Section: User definitions
;; Mostly helper predicates, streams, etc... used
;; when writing policies
;;

; example: (where* (is-node-name "some_name") ...)
(defn is-node-name [node-name]
  (fn [event]
    (= node-name (:node_name event))))


(defn register-policy-trigger
  [deployment-id trigger-name trigger]
  (let [triggers (.get triggers-map deployment-id)]
    (.put triggers trigger-name trigger)))


(defmacro process-policy-triggers
  []
  `(process-policy-triggers* ~'deployment-id ~'group-name ~'policy-name))


(defn process-policy-triggers*
  [deployment-id group-name policy-name]
  (let [dep-triggers-map (.get trigger-map deployment-id)
        dep-groups-map   (.get groups-map deployment-id)
        group            ((symbol group-name) dep-groups-map)
        group-policies   (:policies group)
        group-policy     ((symbol policy-name) group-policies)
        policy-triggers  (:triggers group-policy)]
    (fn [event]
      (doseq [policy-trigger     policy-triggers]
        (let [trigger-name       (key policy-trigger)
              trigger-parameters (:parameters (val policy-trigger))
              trigger            (:trigger-name dep-triggers-map)
              ctx                {:deployment-id deployment-id
                                  :parameters trigger-parameters}]
          ; TODO dispatch to trigger thread pool
          (trigger ctx))))))

;;
;; End Section: User definitions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Section: Deployments core administration
;;

(def config-lock             (Object.))
(def cores-map               (hash-map))
(def triggers-map            (ConcurrentHashMap.))
(def groups-map              (ConcurrentHashMap.))
(def amqp-connection-service (amqp-connection))

(defn start-config! [& children]
  (fn [event]
    (locking config-lock
      (let [config-path   (:config_path event)
            deployment-id (:deployment_id event)
            ok-path       (str config-path "/ok")
            groups-path   (str config-path "/groups")
            groups        (cheshire/parse-string (slurp groups-path) true)]

        ; prepare config cores
        (reset! core      (riemann.core/core))
        (reset! next-core (riemann.core/core))

        ; load configuration files and apply to create new core
        (.put triggers-map deployment-id (hash-map))
        (include config-path)
        (apply!)

        ; external indication new node is up
        (spit ok-path "ok")

        (let [mut-triggers (.get trigger-map deployment-id)
              triggers     (into {} mut-triggers)]
          (.put triggers-map deployment-id triggers))
        (.put groups-map deployment-id groups)
        (.put cores-map deployment-id @core)))))

(defn stop-config! [& children]
  (fn [event]
    (locking config-lock
      (let [ok-path       (str (:config_path event) "/ok")
            deployment-id (:deployment_id event)
            ; get core instance to stop and remove it from the map
            stopped-core  (.remove cores-map deployment-id)]

        (when stopped-core
          (io/delete-file ok-path)
          (riemann.core/stop! stopped-core))))))

;;
;; End Section: Deployments core administration
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Section: Management core configuration
;;

(amqp-queue-consumer "manager-riemann")

(periodically-expire 5)

(let [index (index)]
  (streams
    (default :ttl 60 index)
    (where (and (service "cloudify.configuration")
                (state "start"))
      (start-config!))
    (where (and (service "cloudify.configuration")
                (state "stop"))
      (stop-config!))))

;;
;; End Section: Management core configuration
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
