definitions:

    ##################################################################################
    # Policies & rules definitions
    ##################################################################################
    policies:
        types:
            # $node_id will be injected with the current node id
            # $event will be injected with a json form event
            start_detection_policy:

                message: "Start detection passed"
                policy: |
                  (fn [evnt]
                    (let [ip-event (assoc evnt :host "$node_id"
                                               :service "ip"
                                               :state (get evnt :host)
                                               :description "$event"
                                               :tags ["cosmo"])]
                        (call-rescue ip-event [index]))
                    (let [reachable-event (assoc evnt :host "$node_id"
                                                      :service "reachable"
                                                      :state "true"
                                                      :description "$event"
                                                      :tags ["cosmo"])]
                        (call-rescue reachable-event [index])))

            failure_detection_policy:

                message: "Detected failure"
                policy: |
                  (fn [evnt]
                    (let [ip-event (assoc evnt :host "$node_id"
                                               :service "ip"
                                               :state (get evnt :host)
                                               :description "$event"
                                               :tags ["cosmo"])]
                        (call-rescue ip-event [index]))
                    (let [reachable-event (assoc evnt :host "$node_id"
                                                      :service "reachable"
                                                      :state "false"
                                                      :description "$event"
                                                      :tags ["cosmo"])]
                        (call-rescue reachable-event [index])))

            performance_policy:

                message: "Performance monitoring"
                policy: |
                  (fn [evnt]
                    (let [ip-event (assoc evnt :host "$node_id"
                                               :service "ip"
                                               :state (get evnt :host)
                                               :description "$event"
                                               :tags ["cosmo"])]
                        (call-rescue ip-event [index]))
                    (let [reachable-event (assoc evnt :host "$node_id"
                                                      :service "reachable"
                                                      :state "false"
                                                      :description "$event"
                                                      :tags ["cosmo"])]
                        (call-rescue reachable-event [index])))


        rules:
            #node_policy_events will be injected with the matching policy (see above)
            #node_id will be injected with the current node id
            state_equals:

                message: "state has changed to ${state.value}"
                rule: |
                  (changed-state
                    (where
                        (and
                            (service "${service}")
                            (state "${state}")
                            (tagged "name=$node_id"))
                        $node_policy_events)
                  )

            state_not_equals:

                message: "state of node $node_id has changed to ${state.value}"
                rule: |
                  (changed-state
                    (where
                        (and
                            (service "${service}")
                            (not (state "${state}"))
                            (tagged "name=$node_id"))
                        $node_policy_events)
                  )

            metric_below:

                message: "metric ${service.value} has dropped below a threshold of ${metric},
                with a value of ${metric.value}"
                rule: |
                  (by [:host :service]
                    (changed 
                        (fn [e]
                            (and
                                (not (nil? (:metric e)))
                                (< (:metric e) ${metric})
                            )
                        )
                        {:init false}
                        (where
                            (and
                                (service "${service}")
                                (and
                                    (not (nil? metric))
                                    (< metric ${metric})
                                )
                                (tagged "name=$node_id")
                            )
                            $node_policy_events
                        )
                    )
                  )
